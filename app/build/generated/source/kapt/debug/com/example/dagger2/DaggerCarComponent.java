// Generated by Dagger (https://dagger.dev).
package com.example.dagger2;

import com.example.dagger2.Car.Car;
import com.example.dagger2.Car.DieselEngine;
import com.example.dagger2.Car.Wheels;
import com.example.dagger2.Dagger.CarComponent;
import com.example.dagger2.Dagger.WheelsModule;

import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerCarComponent implements CarComponent {
  private final WheelsModule wheelsModule;

  private DaggerCarComponent(WheelsModule wheelsModuleParam) {
    this.wheelsModule = wheelsModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static CarComponent create() {
    return new Builder().build();
  }

  private Wheels wheels() {
    return WheelsModule_ProvideWheelsFactory.provideWheels(wheelsModule, WheelsModule_ProvideRimsFactory.provideRims(wheelsModule), WheelsModule_ProvideTireFactory.provideTire(wheelsModule));
  }

  @Override
  public Car getCar() {
    return new Car(new DieselEngine(), wheels());
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectCar(instance, getCar());
    return instance;
  }

  public static final class Builder {
    private WheelsModule wheelsModule;

    private Builder() {
    }

    public Builder wheelsModule(WheelsModule wheelsModule) {
      this.wheelsModule = Preconditions.checkNotNull(wheelsModule);
      return this;
    }

    public CarComponent build() {
      if (wheelsModule == null) {
        this.wheelsModule = new WheelsModule();
      }
      return new DaggerCarComponent(wheelsModule);
    }
  }
}
